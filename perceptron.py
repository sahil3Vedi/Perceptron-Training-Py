# -*- coding: utf-8 -*-
"""Perceptron Training EEE1007 Digital Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FrFZyGPgAL6iavK7nb1kkUUyYo23c2WN
"""

import random

#training perceptron

dataset_inputs = [[-1,-1,-1],[-1,1,-1],[-1,-1,1],[-1,1,1],[1,-1,-1],[1,1,-1],[1,-1,1],[1,1,1]]
dataset_targets = [-1,-1,-1,-1,-1,-1,1,-1]

#for x,y in zip(dataset_inputs,dataset_targets):
  #print("Input: " + str(x) + " Target: " + str(y))
  
# Single Perceptron Unit will have 3 inputs, 1 bias.

class perceptron:
  weights = [(0.01*random.randrange(1,5)) for q in range(4)]
  bias = 1
  inputs = []
  target = []
  output = 0
  def __init__(self):
    print("Perceptron Initialised")
    print("Weights: " + str(self.weights) + "\n")
  
  def train(self, n):
    for count in range(n):
      score = 0
      for each_input,its_target in zip(dataset_inputs,dataset_targets):
        self.inputs = [self.bias] + each_input
        self.target = its_target
        self.output = 0
        #print(str(self.inputs) + " ...... " + str(self.target))
        for every_input,every_weight in zip(self.inputs,self.weights):
          self.output += every_input*every_weight
        self.output = round(self.output, 4)
        if self.output>0:
          self.output = 1
        else:
          self.output = -1
        #weight updation
        if(self.output!=self.target):
          dot_product = [self.target*xn for xn in self.inputs]
          temp = [h+k for (h,k) in zip(self.weights,dot_product)]
          self.weights = temp
        else:
          score +=1
        print("Epoch: " + str(count) + " Target: " + str(self.target) + " Output: " + str(self.output))
      print("SCORE: " + str(score) + "/8") 
      print("Weights: " + str(self.weights) + "\n")
      
p1 = perceptron()
p1.train(4)
print("Training Stopped")